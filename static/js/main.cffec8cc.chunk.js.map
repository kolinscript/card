{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","handleLoad","bind","updateCanvas","window","addEventListener","this","removeEventListener","url_current","location","href","console","log","ctx","container","canvas","circleProps","simplex","baseHue","PI","Math","cos","sin","abs","random","TAU","rand","n","initCircles","i","Float32Array","circleCount","SimplexNoise","initCircle","x","y","t","speed","vx","vy","ttl","radius","hue","a","width","height","noise3D","set","updateCircle","life","i2","i3","i4","i5","i6","i7","i8","drawCircle","checkBounds","save","fillStyle","m","hm","fadeInOut","beginPath","arc","fill","closePath","restore","createCanvas","document","querySelector","createElement","b","style","appendChild","getContext","resize","innerWidth","innerHeight","drawImage","draw","clearRect","fillRect","updateCircles","filter","requestAnimationFrame","className","target","rel","Component","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cffec8cc.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n        this.handleLoad = this.handleLoad.bind(this);\n        this.updateCanvas = this.updateCanvas.bind(this);\n    }\n\n    componentDidMount() {\n        window.addEventListener('load', this.handleLoad);\n        this.updateCanvas();\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('load', this.handleLoad);\n    }\n\n    handleLoad() {\n        const url_current = window.location.href;\n        console.log(url_current);\n    }\n\n    updateCanvas() {\n        const {PI, cos, sin, abs, random} = Math;\n        const TAU = 2 * PI;\n        const rand = n => n * random();\n        const fadeInOut = (t, m) => {\n            let hm = 0.5 * m;\n            return abs((t + hm) % m - hm) / (hm);\n        };\n        const circleCount = 150;\n        const circlePropCount = 8;\n        const circlePropsLength = circleCount * circlePropCount;\n        const baseSpeed = 0.1;\n        const rangeSpeed = 1;\n        const baseTTL = 150;\n        const rangeTTL = 200;\n        const baseRadius = 100;\n        const rangeRadius = 200;\n        const rangeHue = 60;\n        const xOff = 0.0015;\n        const yOff = 0.0015;\n        const zOff = 0.0015;\n        const backgroundColor = 'hsla(0,0%,5%,1)';\n        let ctx;\n        let container;\n        let canvas;\n        let circleProps;\n        let simplex;\n        let baseHue;\n\n        const setup = () => {\n            createCanvas();\n            resize();\n            initCircles();\n            draw();\n        }\n\n        const initCircles = () => {\n            circleProps = new Float32Array(circlePropsLength);\n            simplex = new window.SimplexNoise();\n            baseHue = 220;\n\n            let i;\n\n            for (i = 0; i < circlePropsLength; i += circlePropCount) {\n                initCircle(i);\n            }\n        }\n\n        const initCircle = (i) => {\n            let x, y, n, t, speed, vx, vy, life, ttl, radius, hue;\n\n            x = rand(canvas.a.width);\n            y = rand(canvas.a.height);\n            n = simplex.noise3D(x * xOff, y * yOff, baseHue * zOff);\n            t = rand(TAU);\n            speed = baseSpeed + rand(rangeSpeed);\n            vx = speed * cos(t);\n            vy = speed * sin(t);\n            life = 0;\n            ttl = baseTTL + rand(rangeTTL);\n            radius = baseRadius + rand(rangeRadius);\n            hue = baseHue + n * rangeHue;\n\n            circleProps.set([x, y, vx, vy, life, ttl, radius, hue], i);\n        }\n\n        const updateCircles = () => {\n            let i;\n            baseHue++;\n            for (i = 0; i < circlePropsLength; i += circlePropCount) {\n                updateCircle(i);\n            }\n        }\n\n        const updateCircle = (i) => {\n            let i2 = 1 + i, i3 = 2 + i, i4 = 3 + i, i5 = 4 + i, i6 = 5 + i, i7 = 6 + i, i8 = 7 + i;\n            let x, y, vx, vy, life, ttl, radius, hue;\n\n            x = circleProps[i];\n            y = circleProps[i2];\n            vx = circleProps[i3];\n            vy = circleProps[i4];\n            life = circleProps[i5];\n            ttl = circleProps[i6];\n            radius = circleProps[i7];\n            hue = circleProps[i8];\n\n            drawCircle(x, y, life, ttl, radius, hue);\n\n            life++;\n\n            circleProps[i] = x + vx;\n            circleProps[i2] = y + vy;\n            circleProps[i5] = life;\n\n            (checkBounds(x, y, radius) || life > ttl) && initCircle(i);\n        }\n\n        const drawCircle = (x, y, life, ttl, radius, hue) => {\n            ctx.a.save();\n            ctx.a.fillStyle = `hsla(${hue},60%,30%,${fadeInOut(life, ttl)})`;\n            ctx.a.beginPath();\n            ctx.a.arc(x, y, radius, 0, TAU);\n            ctx.a.fill();\n            ctx.a.closePath();\n            ctx.a.restore();\n        }\n\n        const checkBounds = (x, y, radius) => {\n            return (\n                x < -radius ||\n                x > canvas.a.width + radius ||\n                y < -radius ||\n                y > canvas.a.height + radius\n            );\n        }\n\n        const createCanvas = () => {\n            container = document.querySelector('.wrapper-canvas');\n            canvas = {\n                a: document.createElement('canvas'),\n                b: document.createElement('canvas')\n            };\n            canvas.b.style = `\n            position: fixed;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            `;\n            container.appendChild(canvas.b);\n            ctx = {\n                a: canvas.a.getContext('2d'),\n                b: canvas.b.getContext('2d')\n            };\n        }\n\n        const resize = () => {\n            const {innerWidth, innerHeight} = window;\n\n            canvas.a.width = innerWidth;\n            canvas.a.height = innerHeight;\n\n            ctx.a.drawImage(canvas.b, 0, 0);\n\n            canvas.b.width = innerWidth;\n            canvas.b.height = innerHeight;\n\n            ctx.b.drawImage(canvas.a, 0, 0);\n        }\n\n        const render = () => {\n            ctx.b.save();\n            ctx.b.filter = 'blur(50px)';\n            ctx.b.drawImage(canvas.a, 0, 0);\n            ctx.b.restore();\n        }\n\n        const draw = () => {\n            ctx.a.clearRect(0, 0, canvas.a.width, canvas.a.height);\n            ctx.b.fillStyle = backgroundColor;\n            ctx.b.fillRect(0, 0, canvas.b.width, canvas.b.height);\n            updateCircles();\n            render();\n            window.requestAnimationFrame(draw);\n        }\n\n        window.addEventListener('load', setup);\n        window.addEventListener('resize', resize);\n    }\n\n    render() {\n        return (\n            <div className=\"app\">\n                <section className={'section section-one'}>\n                    <div className=\"wrapper-canvas\"></div>\n                    <div className=\"wrapper-content\">\n                        <h1>frontend engineer</h1>\n                        <h2>Nikolai Koshkarov</h2>\n                        <div className=\"links\">\n                            <div className=\"link\">\n                                <a className=\"github\"\n                                   href=\"https://github.com/kolinscript\"\n                                   target=\"_self\"\n                                   rel=\"noopener noreferrer\"\n                                >github\n                                </a>\n                            </div>\n                            <div className=\"link\">\n                                <a className=\"telega\"\n                                   href=\"https://t.me/kolingram\"\n                                   target=\"_blank\"\n                                   rel=\"noopener noreferrer\"\n                                >telegram\n                                </a>\n                            </div>\n                        </div>\n                    </div>\n                </section>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}